name: Release

on:
  workflow_run:
    workflows: ["Generate Booklet PDF files"] # Name of the workflow to listen for
    branches: [master] # Only run on the master branch
    types:
      - completed # Trigger on the completion of the specified workflow

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # Only proceed if the previous workflow succeeded
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const date = new Date().toISOString().split('T')[0]; // Get current date in YYYY-MM-DD format
            const tagName = `release-${date}`;  // Create tag name using the date
            const { data: release } = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: `Triggered by successful completion of the "Generate Booklet PDF" workflow.`,
            });

            return { url: release.html_url, tagName }; // Return the URL and tag name of the created release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        id: upload_assets
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { tagName } = await github.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: '${{ steps.create_release.outputs.id }}'
            });

            const files = fs.readdirSync('./renderer').filter(file => file.endsWith('.pdf')); // Get PDF files from the renderer directory

            for (const file of files) {
              const filePath = path.join('./renderer', file);
              const fileContent = fs.readFileSync(filePath);
              
              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: tagName.id,
                name: file,
                data: fileContent,
                headers: {
                  'content-type': 'application/pdf',
                  'content-length': fileContent.length
                }
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
